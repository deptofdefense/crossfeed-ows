{"componentChunkName":"component---src-templates-documentation-page-js","path":"/setup","result":{"data":{"markdownRemark":{"html":"<h3>Quickstart</h3>\n<ol>\n<li>\n<p>Copy root <code class=\"language-text\">dev.env.example</code> file to a <code class=\"language-text\">.env</code> file, and change values as desired:</p>\n<ul>\n<li><code class=\"language-text\">cp dev.env.example .env</code></li>\n</ul>\n</li>\n<li>\n<p>Build the crossfeed-worker Docker image</p>\n<ul>\n<li><code class=\"language-text\">cd backend &amp;&amp; npm run build-worker</code></li>\n</ul>\n</li>\n<li>\n<p>Start entire environment from root using Docker Compose</p>\n<ul>\n<li><code class=\"language-text\">docker-compose up --build</code></li>\n</ul>\n</li>\n<li>\n<p>Generate DB schema:</p>\n<ul>\n<li><code class=\"language-text\">cd backend &amp;&amp; npm run syncdb</code></li>\n<li>(run <code class=\"language-text\">npm run syncdb -- -d dangerouslyforce</code> to drop and recreate the database)</li>\n</ul>\n</li>\n<li>Navigate to <a href=\"http://localhost\">localhost</a> in a browser.</li>\n<li>\n<p>Hot reloading for source files is enabled, but after changes to non-source code files stopping and starting docker compose is required. The following are examples of changes that will require restarting the environment:</p>\n<ul>\n<li>frontend or backend dependency changes</li>\n<li>backend <code class=\"language-text\">serverless.yml</code> or <code class=\"language-text\">env.yml</code></li>\n<li>environment variables in root <code class=\"language-text\">.env</code></li>\n</ul>\n</li>\n<li>Install <a href=\"https://www.robinwieruch.de/how-to-use-prettier-vscode\">Prettier</a> in your dev environment to format code on save.</li>\n</ol>\n<p>If you want to view a local version of Kibana, you should first comment out the \"kib\" section of <code class=\"language-text\">docker-compose.yml</code> and then navigate to <a href=\"http://localhost:5601\">http://localhost:5601</a>.</p>\n<h4>Running the scheduler lambda function locally</h4>\n<p>The scheduler lambda function is set to run on a 5-minute interval when deployed.</p>\n<p>When running locally, the scheduler function runs every 30 seconds, for convenience. To manually trigger a run immediately, click on the \"Manually run scheduler\" button on the Scans page.</p>\n<p>You can check scheduler logs locally by checking the backend container logs.</p>\n<h4>Running tests</h4>\n<p>To run tests, first make sure you have already started Crossfeed with <code class=\"language-text\">docker-compose</code>. Then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> backend\n<span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span></code></pre></div>\n<p>To update snapshots, run <code class=\"language-text\">npm test -- -u</code>.</p>\n<p>To view a code coverage report (a minimum code coverage threshold is checked in CI), run <code class=\"language-text\">npm test -- --collectCoverage</code>.</p>\n<p>You can then view a HTML coverage report in the <code class=\"language-text\">coverage/lcov-report</code> directory.</p>\n<p>To run Python tests for some worker code, you need to run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> -r worker/requirements.txt\npytest</code></pre></div>\n<h3>Fargate worker</h3>\n<p>In order to run scans locally or work on scanning infrastructure,\nyou will need to set up the Fargate worker and rebuild it periodically\nwhen worker code changes.</p>\n<h4>Running locally</h4>\n<p>Each time you make changes to the worker code, you should run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run build-worker</code></pre></div>\n<p>To run the scheduler, click on \"Manually run scheduler\" on the Scans page.</p>\n<p>You can then run <code class=\"language-text\">docker ps</code> or ( <code class=\"language-text\">docker ps -a | head -n 3</code> ) to view running / stopped Docker containers,\nand check their logs with <code class=\"language-text\">docker logs [containername]</code> .</p>\n<h4>Publishing</h4>\n<p>Run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run deploy-worker</code></pre></div>\n<p>If the <code class=\"language-text\">worker_ecs_repository_url</code> output from Terraform changes, you will need to modify <code class=\"language-text\">./src/tools/deploy-worker.sh</code>.</p>\n<h4>Generating censys types</h4>\n<p>To re-generate the censysIpv4 and censysCertificates type files, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run codegen</code></pre></div>\n<h3>Documentation</h3>\n<p>The documentation files are stored in the <code class=\"language-text\">docs</code> directory and served from a Gatsby site. To work on this, you should run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose up</code></pre></div>\n<p>You can then open up [http://localhost:4000][http://localhost:4000] in your browser.</p>\n<p>See <a href=\"https://github.com/18F/federalist-uswds-gatsby\">federalist-uswds-gatsby</a> for more information on theme customizations that can be done.</p>\n<h3>Matomo</h3>\n<p><a href=\"https://matomo.org/\">Matomo</a> is an open source analytics platform. We host an instance of Matomo as part of Crossfeed to collect analytics\non its usage.</p>\n<p>When running Matomo for the first time locally, you must run <code class=\"language-text\">./setup-matomo.sh</code>.</p>\n<p>You can access Matomo by clicking on the \"Matomo\" button from the \"My Account\" page. Click\nthrough the original setup (keep the default values for database connection, etc.),\nthen set the superuser username and password to \"root\" and \"password\" (for development only, in production generate a random password).</p>","frontmatter":{"title":"Development Setup","sidenav":"contributing"},"fields":{"name":"setup"}}},"pageContext":{"name":"setup"}},"staticQueryHashes":["1824138477","561523179","63159454"]}