{"componentChunkName":"component---src-templates-documentation-page-js","path":"/customization","result":{"data":{"markdownRemark":{"html":"<h3>Creating your own instance of Crossfeed</h3>\n<p>When you create your own instance of Crossfeed, you can customize many aspects of how it looks.</p>\n<p>The <code class=\"language-text\">dev.env.example</code> file contains a full list of all customizable variables.</p>\n<h3>User Agent and signing requests</h3>\n<p>Crossfeed's workers, when performing requets, can optionally send a User Agent identifying the requestor as Crossfeed\nand a <code class=\"language-text\">Signature</code> header to verify that Crossfeed is performing the request.</p>\n<p>To do this, you can set the <code class=\"language-text\">WORKER_USER_AGENT</code>, the <code class=\"language-text\">WORKER_SIGNATURE_PUBLIC_KEY</code>, and the <code class=\"language-text\">WORKER_SIGNATURE_PRIVATE_KEY</code> parameters in your env file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WORKER_USER_AGENT=&quot;Crossfeed (Test request from Crossfeed Staging Environment, for development use only. For more information, see https://github.com/cisagov/crossfeed)&quot;\nWORKER_SIGNATURE_PUBLIC_KEY=&quot;public key, can have newlines&quot;\nWORKER_SIGNATURE_PRIVATE_KEY=&quot;private key, can have newlines&quot;</code></pre></div>\n<h4>Generating RSA keys</h4>\n<p>The public and private key values can be generated by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -m PEM -t rsa -f test_key\nssh-keygen -f test_key.pub -m <span class=\"token string\">'PEM'</span> -e <span class=\"token operator\">></span> test_key.pem</code></pre></div>\n<p>The public key is the value of <code class=\"language-text\">test_key.pem</code> and the private key is the value of <code class=\"language-text\">test_key</code>.</p>\n<h4>Verifying a request</h4>\n<p>One can then verify that requests are coming from Crossfeed by providing you with the following parts of the request:</p>\n<ul>\n<li>Value of the <code class=\"language-text\">Date</code> header</li>\n<li>Value of the <code class=\"language-text\">Signature</code> header</li>\n<li>Request method</li>\n<li>Request URL</li>\n</ul>\n<p>You can call the <code class=\"language-text\">SignRequests.verify_signature</code> method (found in <code class=\"language-text\">backend/worker/mitmproxy_sign_requests.py</code>) to verify a signature with\nthe above four parts of a request. Crossfeed will later have an admin UI that allows admins to run this check directly from the web interface.</p>\n<p>Note that when deploying Crossfeed to AWS, the worker signature public and private keys should also be set as SSM secrets (such as <code class=\"language-text\">/crossfeed/staging/WORKER_SIGNATURE_PUBLIC_KEY</code> and <code class=\"language-text\">/crossfeed/staging/WORKER_SIGNATURE_PRIVATE_KEY</code>).</p>","frontmatter":{"title":"Customization","sidenav":"user-guide"},"fields":{"name":"customization"}}},"pageContext":{"name":"customization"}},"staticQueryHashes":["1824138477","561523179","63159454"]}