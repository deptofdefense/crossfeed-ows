{"componentChunkName":"component---src-templates-documentation-page-js","path":"/deployment","result":{"data":{"markdownRemark":{"html":"<p>Deployment is done automatically through GitHub Actions. Any code pushed to the <code class=\"language-text\">master</code> branch is automatically deployed to the Crossfeed staging site, and any code pushed to the <code class=\"language-text\">production</code> branch is automatically deployed to the production site.</p>\n<p>The following sections detail the manual deployment process for staging.</p>\n<h3>Infrastructure</h3>\n<p>Infrastructure is managed by Terraform. To deploy to staging, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> infrastructure\n<span class=\"token function\">make</span> init\n<span class=\"token function\">make</span> plan\n<span class=\"token function\">make</span> apply</code></pre></div>\n<h3>Backend</h3>\n<p>The backend API is managed by the Serverless Framework. To deploy, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> backend\nnpx sls create_domain --stage<span class=\"token operator\">=</span>staging\nnpx sls deploy --stage<span class=\"token operator\">=</span>staging</code></pre></div>\n<p>To change the environment variables used to build the backend, edit <code class=\"language-text\">env.yaml</code>. Most of these\nvariables are set through SSM variables (which should be set manually / through Terraform -- see below),\nbut some of these variables are hard-coded and configurable by just editing <code class=\"language-text\">env.yaml</code>.</p>\n<h3>Worker</h3>\n<p>Deploying the worker involves building the Docker image and pushing it to ECR:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> backend\n<span class=\"token function\">npm</span> run deploy-worker</code></pre></div>\n<h3>Frontend</h3>\n<p>Deploying the frontend involves building the React code, uploading it to an S3 bucket, then invalidating the Cloudfront cache:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> frontend\n<span class=\"token function\">cp</span> stage.env .env\n<span class=\"token function\">npm</span> run build\naws s3 <span class=\"token function\">sync</span> build/ s3://staging.crossfeed.cyber.dhs.gov/ --delete\naws cloudfront create-invalidation --distribution-id ELM2YU1N4NV9M --paths <span class=\"token string\">\"/index.html\"</span></code></pre></div>\n<p>You may need to change the values in <code class=\"language-text\">stage.env</code> or <code class=\"language-text\">prod.env</code> if you need to change the environment variables\nthat are used to build the frontend.</p>\n<h3>First-time Setup</h3>\n<p>To deploy this app for the first time, you need to do a couple of things:</p>\n<ul>\n<li>Set up a custom domain for the frontend and create an ACM certificate for it</li>\n<li>Generate a login.gov RSA key</li>\n<li>Set initial SSM variables</li>\n</ul>\n<h4>Generate login.gov RSA key</h4>\n<p>Run the following to generate a login.gov RSA key (preferably in a non-git directory outside of crossfeed!):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl genrsa -out private.pem <span class=\"token number\">2048</span>\nopenssl req -newkey rsa:2048 -nodes -days <span class=\"token number\">3650</span> -out csr.pem\nopenssl x509 -req -in csr.pem -out cert.pem -signkey private.pem\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g pem-jwk\npem-jwk private.pem <span class=\"token operator\">></span> private.jwk</code></pre></div>\n<p>Visit <a href=\"https://dashboard.int.identitysandbox.gov/\">the Login.gov sandbox dashboard</a> to create a login.gov application, providing <code class=\"language-text\">cert.pem</code> as the public certificate. Copy the contents of <code class=\"language-text\">private.jwk</code> to use as your <code class=\"language-text\">LOGIN_GOV_JWT_KEY</code> in the next step.</p>\n<h4>Set initial SSM variables</h4>\n<p>First, make sure you set the following SSM variables manually through the AWS Console (replace <code class=\"language-text\">staging</code> with <code class=\"language-text\">prod</code> as needed). Make sure these variables are set as \"SecureString\":</p>\n<ul>\n<li><code class=\"language-text\">/crossfeed/staging/DATABASE_USER</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/DATABASE_PASSWORD</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/APP_JWT_SECRET</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/CENSYS_API_ID</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/CENSYS_API_SECRET</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LOGIN_GOV_REDIRECT_URI</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LOGIN_GOV_BASE_URL</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LOGIN_GOV_JWT_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/LOGIN_GOV_ISSUER</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/WORKER_USER_AGENT</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/WORKER_SIGNATURE_PUBLIC_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/WORKER_SIGNATURE_PRIVATE_KEY</code></li>\n<li><code class=\"language-text\">/crossfeed/staging/REACT_APP_TERMS_VERSION</code></li>\n</ul>\n<h4>Create service-linked role for Amazon ES</h4>\n<p>You must also <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/slr-es.html#create-slr\">create a service-linked role for Amazon ES</a> (this only needs to be created once per AWS account):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">aws iam create-service-linked-role --aws-service-name es.amazonaws.com</code></pre></div>\n<h4>Use Terraform</h4>\n<p>Then, run <code class=\"language-text\">cp stage.config .env</code> and change the variables in <code class=\"language-text\">.env</code> to use a bucket you have access to to store state.</p>\n<p>Make sure you configure the default AWS profile using <code class=\"language-text\">aws configure</code> , or set the <code class=\"language-text\">AWS_PROFILE</code> environment variable in <code class=\"language-text\">.env</code>.</p>\n<p>Then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -g dotenv-cli\n<span class=\"token function\">make</span> init\n<span class=\"token function\">make</span> plan\n<span class=\"token function\">make</span> apply</code></pre></div>","frontmatter":{"title":"Deployment","sidenav":"contributing"},"fields":{"name":"deployment"}}},"pageContext":{"name":"deployment"}},"staticQueryHashes":["1824138477","561523179","63159454"]}